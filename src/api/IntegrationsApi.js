/*
 * Brainrex API
 * Provides anomaly detection and natural language processing technlogies to blockchain developers.
 *
 * OpenAPI spec version: 1.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CandleRequest', 'model/CandleResponse', 'model/Exchange', 'model/ExchangeAssetsResponse', 'model/OrderbookRequest', 'model/OrderbookResponse', 'model/SupportedExchanges', 'model/TickerResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CandleRequest'), require('../model/CandleResponse'), require('../model/Exchange'), require('../model/ExchangeAssetsResponse'), require('../model/OrderbookRequest'), require('../model/OrderbookResponse'), require('../model/SupportedExchanges'), require('../model/TickerResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.Brainrex) {
      root.Brainrex = {};
    }
    root.Brainrex.IntegrationsApi = factory(root.Brainrex.ApiClient, root.Brainrex.CandleRequest, root.Brainrex.CandleResponse, root.Brainrex.Exchange, root.Brainrex.ExchangeAssetsResponse, root.Brainrex.OrderbookRequest, root.Brainrex.OrderbookResponse, root.Brainrex.SupportedExchanges, root.Brainrex.TickerResponse);
  }
}(this, function(ApiClient, CandleRequest, CandleResponse, Exchange, ExchangeAssetsResponse, OrderbookRequest, OrderbookResponse, SupportedExchanges, TickerResponse) {
  'use strict';

  /**
   * Integrations service.
   * @module api/IntegrationsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new IntegrationsApi. 
   * @alias module:api/IntegrationsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cryptoGetCandleData operation.
     * @callback module:api/IntegrationsApi~cryptoGetCandleDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CandleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads candle format market data
     * Returns a list of candle data from specified market and data range
     * @param {module:model/CandleRequest} candleRequest The Get candles end point return market data in Open High Close Volume format. In order to use this endpoint you need to enter your API keys to your data provider in the console
     * @param {module:api/IntegrationsApi~cryptoGetCandleDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CandleResponse}
     */
    this.cryptoGetCandleData = function(candleRequest, callback) {
      var postBody = candleRequest;

      // verify the required parameter 'candleRequest' is set
      if (candleRequest === undefined || candleRequest === null) {
        throw new Error("Missing the required parameter 'candleRequest' when calling cryptoGetCandleData");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CandleResponse;

      return this.apiClient.callApi(
        '/crypto/get_candles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cryptoGetExchangeAssets operation.
     * @callback module:api/IntegrationsApi~cryptoGetExchangeAssetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExchangeAssetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all currency pairs traded in selected exchange
     * Returns a list of candle data from specified market and data range
     * @param {module:model/Exchange} exchange Name of the cryptocurrency exchange
     * @param {module:api/IntegrationsApi~cryptoGetExchangeAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExchangeAssetsResponse}
     */
    this.cryptoGetExchangeAssets = function(exchange, callback) {
      var postBody = exchange;

      // verify the required parameter 'exchange' is set
      if (exchange === undefined || exchange === null) {
        throw new Error("Missing the required parameter 'exchange' when calling cryptoGetExchangeAssets");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExchangeAssetsResponse;

      return this.apiClient.callApi(
        '/crypto/get_exchange_assets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cryptoGetOrderbooks operation.
     * @callback module:api/IntegrationsApi~cryptoGetOrderbooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderbookResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads candle format market data
     * Returns a list of candle data from specified market and data range
     * @param {module:model/OrderbookRequest} orderbookRequest Exchange, trading pair and date rage for data
     * @param {module:api/IntegrationsApi~cryptoGetOrderbooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderbookResponse}
     */
    this.cryptoGetOrderbooks = function(orderbookRequest, callback) {
      var postBody = orderbookRequest;

      // verify the required parameter 'orderbookRequest' is set
      if (orderbookRequest === undefined || orderbookRequest === null) {
        throw new Error("Missing the required parameter 'orderbookRequest' when calling cryptoGetOrderbooks");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = OrderbookResponse;

      return this.apiClient.callApi(
        '/crypto/get_orderbooks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cryptoGetSupportedExchanges operation.
     * @callback module:api/IntegrationsApi~cryptoGetSupportedExchangesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupportedExchanges} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all cryptocurrency exchanges supported by the Brainrex API
     * Returns a list of candle data from specified market and data range
     * @param {module:api/IntegrationsApi~cryptoGetSupportedExchangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupportedExchanges}
     */
    this.cryptoGetSupportedExchanges = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SupportedExchanges;

      return this.apiClient.callApi(
        '/crypto/get_supported_exchanges', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cryptoGetTicker operation.
     * @callback module:api/IntegrationsApi~cryptoGetTickerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TickerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads candle format market data
     * Returns a list of candle data from specified market and data range
     * @param {module:model/Exchange} exchange Get ticker data from specified crypto exchange
     * @param {module:api/IntegrationsApi~cryptoGetTickerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TickerResponse}
     */
    this.cryptoGetTicker = function(exchange, callback) {
      var postBody = exchange;

      // verify the required parameter 'exchange' is set
      if (exchange === undefined || exchange === null) {
        throw new Error("Missing the required parameter 'exchange' when calling cryptoGetTicker");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TickerResponse;

      return this.apiClient.callApi(
        '/crypto/get_ticker', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
