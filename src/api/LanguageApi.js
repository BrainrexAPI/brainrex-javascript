/*
 * Brainrex API
 * Provides anomaly detection and natural language processing technlogies to blockchain developers.
 *
 * OpenAPI spec version: 1.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Text'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Text'));
  } else {
    // Browser globals (root is window)
    if (!root.Brainrex) {
      root.Brainrex = {};
    }
    root.Brainrex.LanguageApi = factory(root.Brainrex.ApiClient, root.Brainrex.Text);
  }
}(this, function(ApiClient, Text) {
  'use strict';

  /**
   * Language service.
   * @module api/LanguageApi
   * @version 1.0.0
   */

  /**
   * Constructs a new LanguageApi. 
   * @alias module:api/LanguageApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the languageGetCryptoEntities operation.
     * @callback module:api/LanguageApi~languageGetCryptoEntitiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Named Entity Recognition software capable of understanding cryptocurrency and blockchain speficic language.
     * This endpoint ingest text and output known entities 
     * @param {module:model/Text} text String of text to be analyze for investor sentiment.
     * @param {module:api/LanguageApi~languageGetCryptoEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.languageGetCryptoEntities = function(text, callback) {
      var postBody = text;

      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling languageGetCryptoEntities");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/entity/get_crypto_entities', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the languageGetGeneralSentiment operation.
     * @callback module:api/LanguageApi~languageGetGeneralSentimentCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This endpoints returns a score from -1 to +1 where depending on negative or positive attitude in the text.
     * Returns a -1 to 1 score, depending on positive/negative sentiment
     * @param {module:model/Text} text String of text to be analyze for general sentiment.
     * @param {module:api/LanguageApi~languageGetGeneralSentimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.languageGetGeneralSentiment = function(text, callback) {
      var postBody = text;

      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling languageGetGeneralSentiment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/sentiment/get_general_sentiment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the languageGetPriceSentiment operation.
     * @callback module:api/LanguageApi~languageGetPriceSentimentCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sentiment analysis score using a model trained for buy signals.
     * Gives a 0 to 1 score, depending on buy/sell sentiment
     * @param {module:model/Text} text String of text to be analyze for investor sentiment.
     * @param {module:api/LanguageApi~languageGetPriceSentimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.languageGetPriceSentiment = function(text, callback) {
      var postBody = text;

      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling languageGetPriceSentiment");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/language/get_price_sentiment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
