/*
 * Codabl Community API
 * The Codabl API is a collection of analytics tools and data integrations made for blockchain developers. In particular we offer Natural Language Processing and Anomaly detection algorithms that have been fine tune to understand text data and time series in the domain speficic setting of cryptocurrency and blockchain technology. This technology is intended to be use as building blocks to bigger applications, we offer examples on how to use them for Trading Backtesting and Smart Contract anomaly monitoring.
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Error', 'model/TimeSeries'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Error'), require('../model/TimeSeries'));
  } else {
    // Browser globals (root is window)
    if (!root.Codabl) {
      root.Codabl = {};
    }
    root.Codabl.AnomalyApi = factory(root.Codabl.ApiClient, root.Codabl.Error, root.Codabl.TimeSeries);
  }
}(this, function(ApiClient, Error, TimeSeries) {
  'use strict';

  /**
   * Anomaly service.
   * @module codabl/AnomalyApi
   * @version 0.1.0
   */

  /**
   * Constructs a new AnomalyApi. 
   * @alias module:codabl/AnomalyApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the anomalyBatch operation.
     * @callback module:codabl/AnomalyApi~anomalyBatchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'Boolean'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detects anomalies in historical data in batches. This endpoint uses your entire dataset as input
     * The Anomaly Detect endpoint ingests time series data of all types, then monitors and detects abnormalities historical time series data. <br><br> Our AI selects from several models, choosing the one that fits the given data best, and we give you the avality to customize the sensitivy of the model. Our model has been trained to recognize anomalies in popular blockchain networks e.g. Bitcoin, Ethereum, learning from past events.
     * @param {Object} opts Optional parameters
     * @param {module:model/TimeSeries} opts.request Time Series to be analyzed, with the following format.
     * @param {module:codabl/AnomalyApi~anomalyBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'Boolean'>}
     */
    this.anomalyBatch = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['request'];


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['APIKeyHeader'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['Boolean'];

      return this.apiClient.callApi(
        '/anomaly/json/detect', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
