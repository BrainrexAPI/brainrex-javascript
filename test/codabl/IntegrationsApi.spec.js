/*
 * Codabl Community API
 * The Codabl API is a collection of analytics tools and data integrations made for blockchain developers. In particular we offer Natural Language Processing and Anomaly detection algorithms that have been fine tune to understand text data and time series in the domain speficic setting of cryptocurrency and blockchain technology. This technology is intended to be use as building blocks to bigger applications, we offer examples on how to use them for Trading Backtesting and Smart Contract anomaly monitoring.
 *
 * OpenAPI spec version: 0.1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Codabl);
  }
}(this, function(expect, Codabl) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Codabl.IntegrationsApi();
  });

  describe('(package)', function() {
    describe('IntegrationsApi', function() {
      describe('cryptoGetCandleData', function() {
        it('should call cryptoGetCandleData successfully', function(done) {
          // TODO: uncomment, update parameter values for cryptoGetCandleData call and complete the assertions
          /*
          var candleRequest = new Codabl.CandleRequest();
          candleRequest.baseTradingSymbol = "BTC";
          candleRequest.exchange = "coinbasepro";
          candleRequest.interval = "6h";
          candleRequest.quoteTradingSymbol = "USD";

          instance.cryptoGetCandleData(candleRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Codabl.CandleResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cryptoGetExchangeAssets', function() {
        it('should call cryptoGetExchangeAssets successfully', function(done) {
          // TODO: uncomment, update parameter values for cryptoGetExchangeAssets call and complete the assertions
          /*
          var exchange = new Codabl.Exchange();
          exchange.exchange = "binance";

          instance.cryptoGetExchangeAssets(exchange, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Codabl.ExchangeAssetsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cryptoGetOrderbooks', function() {
        it('should call cryptoGetOrderbooks successfully', function(done) {
          // TODO: uncomment, update parameter values for cryptoGetOrderbooks call and complete the assertions
          /*
          var orderbookRequest = new Codabl.OrderbookRequest();
          orderbookRequest.baseTradingSymbol = "BTC";
          orderbookRequest.exchange = "coinbasepro";
          orderbookRequest.limit = 2.0;
          orderbookRequest.quoteTradingSymbol = "USD";

          instance.cryptoGetOrderbooks(orderbookRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Codabl.OrderbookResponse);
            expect(data.baseTradingSymbol).to.be.a('string');
            expect(data.baseTradingSymbol).to.be("BTC");
            expect(data.exchange).to.be.a('string');
            expect(data.exchange).to.be("coinbasepro");
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(2.0);
            expect(data.quoteTradingSymbol).to.be.a('string');
            expect(data.quoteTradingSymbol).to.be("USD");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cryptoGetSupportedExchanges', function() {
        it('should call cryptoGetSupportedExchanges successfully', function(done) {
          // TODO: uncomment cryptoGetSupportedExchanges call and complete the assertions
          /*

          instance.cryptoGetSupportedExchanges(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Codabl.SupportedExchanges);
            expect(data.bestCaseFee).to.be.a('number');
            expect(data.bestCaseFee).to.be(2.0);
            expect(data.worstCaseFee).to.be.a('number');
            expect(data.worstCaseFee).to.be(2.0);
            expect(data.exchange).to.be.a('string');
            expect(data.exchange).to.be("USD");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cryptoGetTicker', function() {
        it('should call cryptoGetTicker successfully', function(done) {
          // TODO: uncomment, update parameter values for cryptoGetTicker call and complete the assertions
          /*
          var exchange = new Codabl.Exchange();
          exchange.exchange = "binance";

          instance.cryptoGetTicker(exchange, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Codabl.TickerResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
