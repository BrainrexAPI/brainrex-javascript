/*
 * BrainRex API
 * The Brainrex API is a collection of analytics tools and data integrations made for blockchain developers. In particular we offer Natural Language Processing and Anomaly detection algorithms that have been fine tune to understand text data and time series in the domain speficic setting of cryptocurrency and blockchain technology. This technology is intended to be use as building blocks to bigger applications, we offer examples on how to use them for Trading Backtesting and Smart Contract anomaly monitoring.
 *
 * OpenAPI spec version: 1.0.2
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.44
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BrainRexApi);
  }
}(this, function(expect, BrainRexApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('OHCLV', function() {
      beforeEach(function() {
        instance = new BrainRexApi.OHCLV();
      });

      it('should create an instance of OHCLV', function() {
        // TODO: update the code to test OHCLV
        expect(instance).to.be.a(BrainRexApi.OHCLV);
      });

      it('should have the property close (base name: "close")', function() {
        // TODO: update the code to test the property close
        expect(instance).to.have.property('close');
        // expect(instance.close).to.be(expectedValueLiteral);
      });

      it('should have the property high (base name: "high")', function() {
        // TODO: update the code to test the property high
        expect(instance).to.have.property('high');
        // expect(instance.high).to.be(expectedValueLiteral);
      });

      it('should have the property endDate (base name: "end_date")', function() {
        // TODO: update the code to test the property endDate
        expect(instance).to.have.property('endDate');
        // expect(instance.endDate).to.be(expectedValueLiteral);
      });

      it('should have the property open (base name: "open")', function() {
        // TODO: update the code to test the property open
        expect(instance).to.have.property('open');
        // expect(instance.open).to.be(expectedValueLiteral);
      });

      it('should have the property time (base name: "time")', function() {
        // TODO: update the code to test the property time
        expect(instance).to.have.property('time');
        // expect(instance.time).to.be(expectedValueLiteral);
      });

      it('should have the property volume (base name: "volume")', function() {
        // TODO: update the code to test the property volume
        expect(instance).to.have.property('volume');
        // expect(instance.volume).to.be(expectedValueLiteral);
      });

      it('should have the property usdVolume (base name: "usdVolume")', function() {
        // TODO: update the code to test the property usdVolume
        expect(instance).to.have.property('usdVolume');
        // expect(instance.usdVolume).to.be(expectedValueLiteral);
      });

      it('should have the property btcVolume (base name: "btcVolume")', function() {
        // TODO: update the code to test the property btcVolume
        expect(instance).to.have.property('btcVolume');
        // expect(instance.btcVolume).to.be(expectedValueLiteral);
      });

      it('should have the property quoteVolume (base name: "quoteVolume")', function() {
        // TODO: update the code to test the property quoteVolume
        expect(instance).to.have.property('quoteVolume');
        // expect(instance.quoteVolume).to.be(expectedValueLiteral);
      });

    });
  });

}));
