/*
 * Brainrex API
 * Provides anomaly detection and natural language processing technlogies to blockchain developers.
 *
 * OpenAPI spec version: 1.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Brainrex);
  }
}(this, function(expect, Brainrex) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Brainrex.IntegrationsApi();
  });

  describe('(package)', function() {
    describe('IntegrationsApi', function() {
      describe('cryptoGetCandleData', function() {
        it('should call cryptoGetCandleData successfully', function(done) {
          // TODO: uncomment, update parameter values for cryptoGetCandleData call and complete the assertions
          /*
          var candleRequest = new Brainrex.CandleRequest();
          candleRequest.baseTradingSymbol = "BTC";
          candleRequest.exchange = "coinbasepro";
          candleRequest.interval = "6h";
          candleRequest.quoteTradingSymbol = "USD";

          instance.cryptoGetCandleData(candleRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Brainrex.CandleResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cryptoGetExchangeAssets', function() {
        it('should call cryptoGetExchangeAssets successfully', function(done) {
          // TODO: uncomment, update parameter values for cryptoGetExchangeAssets call and complete the assertions
          /*
          var exchange = new Brainrex.Exchange();
          exchange.exchange = "binance";

          instance.cryptoGetExchangeAssets(exchange, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Brainrex.ExchangeAssetsResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cryptoGetOrderbooks', function() {
        it('should call cryptoGetOrderbooks successfully', function(done) {
          // TODO: uncomment, update parameter values for cryptoGetOrderbooks call and complete the assertions
          /*
          var orderbookRequest = new Brainrex.OrderbookRequest();
          orderbookRequest.baseTradingSymbol = "BTC";
          orderbookRequest.exchange = "coinbasepro";
          orderbookRequest.limit = 2.0;
          orderbookRequest.quoteTradingSymbol = "USD";

          instance.cryptoGetOrderbooks(orderbookRequest, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Brainrex.OrderbookResponse);
            expect(data.baseTradingSymbol).to.be.a('string');
            expect(data.baseTradingSymbol).to.be("BTC");
            expect(data.exchange).to.be.a('string');
            expect(data.exchange).to.be("coinbasepro");
            expect(data.limit).to.be.a('number');
            expect(data.limit).to.be(2.0);
            expect(data.quoteTradingSymbol).to.be.a('string');
            expect(data.quoteTradingSymbol).to.be("USD");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cryptoGetSupportedExchanges', function() {
        it('should call cryptoGetSupportedExchanges successfully', function(done) {
          // TODO: uncomment cryptoGetSupportedExchanges call and complete the assertions
          /*

          instance.cryptoGetSupportedExchanges(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Brainrex.SupportedExchanges);
            expect(data.bestCaseFee).to.be.a('number');
            expect(data.bestCaseFee).to.be(2.0);
            expect(data.worstCaseFee).to.be.a('number');
            expect(data.worstCaseFee).to.be(2.0);
            expect(data.exchange).to.be.a('string');
            expect(data.exchange).to.be("USD");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('cryptoGetTicker', function() {
        it('should call cryptoGetTicker successfully', function(done) {
          // TODO: uncomment, update parameter values for cryptoGetTicker call and complete the assertions
          /*
          var exchange = new Brainrex.Exchange();
          exchange.exchange = "binance";

          instance.cryptoGetTicker(exchange, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Brainrex.TickerResponse);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
